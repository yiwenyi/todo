{"version":3,"sources":["../src/index.js"],"names":["ImageminPlugin","options","disable","test","minFileSize","maxFileSize","Infinity","maxConcurrency","length","plugins","optipng","optimizationLevel","gifsicle","jpegtran","progressive","svgo","pngquant","externalImages","cacheFolder","imageminOptions","testFunction","context","sources","destination","plugin","pluginOptions","push","compiler","compilerOptions","compilation","callback","throttle","all","optimizeWebpackImages","optimizeExternalImages","assets","asset","filename","assetSource","source","optimizedImageBuffer","fullContext","resolve","invokedDestination","relativeFilePath","relative","fileData","writeFilePath","join"],"mappings":"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","file":"index.js","sourcesContent":["import path from 'path'\nimport { cpus } from 'os'\nimport map from 'lodash.map'\nimport imageminSvgo from 'imagemin-svgo'\nimport createThrottle from 'async-throttle'\nimport imageminOptipng from 'imagemin-optipng'\nimport imageminPngquant from 'imagemin-pngquant'\nimport imageminGifsicle from 'imagemin-gifsicle'\nimport imageminJpegtran from 'imagemin-jpegtran'\nimport RawSource from 'webpack-sources/lib/RawSource'\n\nimport {\n  buildTestFunction,\n  invokeIfFunction,\n  getFromCacheIfPossible,\n  readFile,\n  writeFile,\n  optimizeImage\n} from './helpers.js'\n\nexport default class ImageminPlugin {\n  constructor (options = {}) {\n    // I love ES2015!\n    const {\n      disable = false,\n      test = /.*/,\n      minFileSize = 0,\n      maxFileSize = Infinity,\n      maxConcurrency = cpus().length,\n      plugins = [],\n      optipng = {\n        optimizationLevel: 3\n      },\n      gifsicle = {\n        optimizationLevel: 1\n      },\n      jpegtran = {\n        progressive: false\n      },\n      svgo = {},\n      pngquant = null,\n      externalImages = {},\n      cacheFolder = null\n    } = options\n\n    this.options = {\n      disable,\n      maxConcurrency,\n      imageminOptions: {\n        plugins: []\n      },\n      testFunction: buildTestFunction(test, minFileSize, maxFileSize),\n      externalImages: {\n        context: '.',\n        sources: [],\n        destination: '.',\n        ...externalImages\n      },\n      cacheFolder\n    }\n\n    // As long as the options aren't `null` then include the plugin. Let the destructuring above\n    // control whether the plugin is included by default or not.\n    for (let [plugin, pluginOptions] of [\n      [imageminOptipng, optipng],\n      [imageminGifsicle, gifsicle],\n      [imageminJpegtran, jpegtran],\n      [imageminSvgo, svgo],\n      [imageminPngquant, pngquant]\n    ]) {\n      if (pluginOptions !== null) {\n        this.options.imageminOptions.plugins.push(plugin(pluginOptions))\n      }\n    }\n\n    // And finally, add any plugins that they pass in the options to the internal plugins array\n    this.options.imageminOptions.plugins.push(...plugins)\n  }\n\n  apply (compiler) {\n    // Add the compiler options to my options\n    this.options.compilerOptions = compiler.options\n\n    // If disabled, short-circuit here and just return\n    if (this.options.disable === true) return null\n\n    // Access the assets once they have been assembled\n    compiler.plugin('emit', async (compilation, callback) => {\n      // Create a throttle object which will limit the number of concurrent processes running\n      const throttle = createThrottle(this.options.maxConcurrency)\n\n      try {\n        // Optimise all images at the same time (throttled to maxConcurrency)\n        // and await until all of them to complete\n        await Promise.all([\n          ...this.optimizeWebpackImages(throttle, compilation),\n          ...this.optimizeExternalImages(throttle)\n        ])\n\n        // At this point everything is done, so call the callback without anything in it\n        callback()\n      } catch (err) {\n        // if at any point we hit a snag, pass the error on to webpack\n        callback(err)\n      }\n    })\n  }\n\n  /**\n   * Optimize images from webpack and put them back in the asset array when done\n   * @param  {Function} throttle       The setup throttle library\n   * @param  {Object} compilation      The compilation from webpack-sources\n   * @return {Promise[]}               An array of promises that resolve when each image is done being optimized\n   */\n  optimizeWebpackImages (throttle, compilation) {\n    const {\n      testFunction,\n      cacheFolder\n    } = this.options\n\n    // Return an array of promises that resolve when each file is done being optimized\n    // pass everything through the throttle function to limit maximum concurrency\n    return map(compilation.assets, (asset, filename) => throttle(async () => {\n      const assetSource = asset.source()\n      // Skip the image if it's not a match for the regex or it's too big/small\n      if (testFunction(filename, assetSource)) {\n        // Use the helper function to get the file from cache if possible, or\n        // run the optimize function and store it in the cache when done\n        let optimizedImageBuffer = await getFromCacheIfPossible(cacheFolder, filename, () => {\n          return optimizeImage(assetSource, this.options.imageminOptions)\n        })\n\n        // Then write the optimized version back to the asset object as a \"raw source\"\n        compilation.assets[filename] = new RawSource(optimizedImageBuffer)\n      }\n    }))\n  }\n\n  /**\n   * Optimizes external images\n   * @param  {Function} throttle The setup throttle library\n   * @return {Promise[]}         An array of promises that resolve when each image is done being optimized\n   */\n  optimizeExternalImages (throttle) {\n    const {\n      compilerOptions,\n      externalImages: {\n        context,\n        sources,\n        destination\n      },\n      testFunction,\n      cacheFolder\n    } = this.options\n\n    const fullContext = path.resolve(compilerOptions.context, context)\n\n    const invokedDestination = path.resolve(invokeIfFunction(destination))\n\n    return map(invokeIfFunction(sources), (filename) => throttle(async () => {\n      const relativeFilePath = path.relative(fullContext, filename)\n      const fileData = await readFile(path.resolve(fullContext, relativeFilePath))\n      if (testFunction(filename, fileData)) {\n        const writeFilePath = path.join(invokedDestination, relativeFilePath)\n\n        // Use the helper function to get the file from cache if possible, or\n        // run the optimize function and store it in the cache when done\n        let optimizedImageBuffer = await getFromCacheIfPossible(cacheFolder, relativeFilePath, async () => {\n          return optimizeImage(fileData, this.options.imageminOptions)\n        })\n\n        // Write the file to the destination when done\n        return writeFile(writeFilePath, optimizedImageBuffer)\n      }\n    }))\n  }\n}\n"]}